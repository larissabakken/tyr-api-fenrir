generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

enum Permission {
  SUPERADMIN
  ADMIN
  USER
  GUEST
}

enum Status {
  PENDING
  IN_PROGRESS
  FINISHED
  CANCELED
}

model User {
  id         String      @id @default(uuid())
  email      String      @unique
  name       String
  password   String
  cpf        String      @unique
  permission Permission? @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Driver {
  id      String  @id @default(uuid())
  name    String
  cpf     String? @unique
  cnpj    String? @unique
  email   String?
  phone   String
  address String?
  status  Boolean

  shipments Shipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drivers")
}

model Owner {
  id      String  @id @default(uuid())
  name    String
  cpf     String? @unique
  cnpj    String? @unique
  email   String?
  phone   String?
  address String?

  trucks   Truck[]   @relation("OwnerToTruck")
  vehicles Vehicle[] @relation("OwnerToVehicle")
  carts    Cart[]    @relation("OwnerToCart")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("owners")
}

model Truck {
  id          String  @id @default(uuid())
  description String?

  license_plate String  @unique
  chassis       String? @unique
  renavam       String? @unique
  status        Boolean

  type_of_truck       String?
  model               String?
  color               String?
  year_of_manufacture Int?
  type_of_cart        String?
  number_of_axles     Int

  ownerId   String
  owner     Owner      @relation("OwnerToTruck", fields: [ownerId], references: [id], onDelete: Cascade)
  shipments Shipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trucks")
}

model Cart {
  id            String  @id @default(uuid())
  description   String?
  status        Boolean
  license_plate String  @unique
  chassis       String? @unique
  renavam       String? @unique

  model               String?
  manufacturer        String?
  number_of_axles     Int?
  year_of_manufacture Int?
  type_of_cart        String?

  shipments ShipmentCart[]
  ownerId   String
  owner     Owner          @relation("OwnerToCart", fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Vehicle {
  id            String  @id @default(uuid())
  description   String?
  status        Status
  price         Float?
  origin        String
  destination   String
  license_plate String  @unique
  chassis       String? @unique
  renavam       String? @unique

  model               String?
  color               String?
  manufacturer        String?
  year_of_manufacture Int?
  type_of_vehicle     String?

  shipments ShipmentVehicle[]
  ownerId   String
  owner     Owner             @relation("OwnerToVehicle", fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Customers {
  id      String  @id @default(uuid())
  name    String
  cpf     String? @unique
  cnpj    String? @unique
  email   String?
  phone   String
  address String?

  shipments Shipment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Shipment {
  id                String  @id @default(uuid())
  origin            String
  final_destination String
  status            Status
  total_cost        Float?
  description       String?

  driverId   String?
  truckId    String?
  customerId String?

  vehicles ShipmentVehicle[]
  carts    ShipmentCart[]

  truck    Truck?     @relation(fields: [truckId], references: [id])
  driver   Driver?    @relation(fields: [driverId], references: [id])
  customer Customers? @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipments")
}

model ShipmentVehicle {
  id         String @id @default(uuid())
  shipmentId String
  vehicleId  String

  shipment Shipment @relation(fields: [shipmentId], references: [id])
  vehicle  Vehicle  @relation(fields: [vehicleId], references: [id])

  assignedAt DateTime @default(now())

  @@map("shipment_vehicles")
}

model ShipmentCart {
  id         String @id @default(uuid())
  shipmentId String
  cartId     String

  shipment Shipment @relation(fields: [shipmentId], references: [id])
  cart     Cart     @relation(fields: [cartId], references: [id])

  assignedAt DateTime @default(now())

  @@map("shipment_carts")
}
