generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id         String @id @default(uuid())
  email      String @unique
  name       String
  password   String
  cpf        String @unique
  permission String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Driver {
  id      String  @id @default(uuid())
  name    String
  cpf     String? @unique
  cnpj    String? @unique
  email   String
  phone   String
  address String?
  status  Boolean

  shipments Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("drivers")
}

model Owner {
  id      String  @id @default(uuid())
  name    String
  cpf     String? @unique
  cnpj    String? @unique
  email   String?
  phone   String?
  address String?

  trucks   Truck[]   @relation("OwnerToTruck")
  vehicles Vehicle[] @relation("OwnerToVehicle")
  carts    Cart[]    @relation("OwnerToCart")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("owners")
}

model Truck {
  id          String  @id @default(uuid())
  description String?

  licensePlate String  @unique
  chassis      String? @unique
  renavam      String? @unique
  status       Boolean

  type_of_truck       String?
  model             String?
  color             String?
  year_of_manufacture Int?
  type_of_cart        String?
  number_of_axles     Int

  ownerId   String
  owner     Owner      @relation("OwnerToTruck", fields: [ownerId], references: [id])
  shipments Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trucks")
}

model Cart {
  id           String  @id @default(uuid())
  description  String?
  status       Boolean
  license_plate String  @unique
  chassis      String? @unique
  renavam      String? @unique

  model             String?
  manufacturer      String?
  number_of_axles     Int?
  year_of_manufacture Int?
  type_of_cart        String?

  ownerId   String
  owner     Owner           @relation("OwnerToCart", fields: [ownerId], references: [id])
  shipments CartsShipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts")
}

model Vehicle {
  id           String  @id @default(uuid())
  description  String?
  price        Float?
  origin       String
  destination  String
  license_plate String  @unique
  chassis      String? @unique
  renavam      String? @unique

  model             String?
  color             String?
  manufacturer      String?
  year_of_manufacture Int?
  type_of_vehicle     String?

  ownerId   String
  owner     Owner              @relation("OwnerToVehicle", fields: [ownerId], references: [id])
  shipments VehiclesShipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

model Customers {
  id      String  @id @default(uuid())
  name    String
  cpf     String? @unique
  cnpj    String? @unique
  email   String?
  phone   String
  address String?

  shipments Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Shipping {
  id                String @id @default(uuid())
  origin            String
  final_destination String
  totalCost         Float?
  status            String

  driverId   String?
  truckId    String?
  customerId String?

  vehicles VehiclesShipping[]
  carts    CartsShipping[]

  truck    Truck?     @relation(fields: [truckId], references: [id])
  driver   Driver?    @relation(fields: [driverId], references: [id])
  customer Customers? @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipments")
}

model VehiclesShipping {
  id         String   @id @default(uuid())
  shippingId String   @map("shipping_id")
  shipping   Shipping @relation(fields: [shippingId], references: [id])
  Vehicle    Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles_shipments")
}

model CartsShipping {
  id         String   @id @default(uuid())
  shippingId String   @map("shipping_id")
  shipments   Shipping @relation(fields: [shippingId], references: [id])
  cartId     String?
  Cart       Cart?    @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts_shipments")
}
