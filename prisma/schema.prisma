generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}

model User {
  id         String @id @default(uuid())
  email      String @unique
  name       String
  password   String
  cpf        String @unique
  permission String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Driver {
  id       String  @id @default(uuid())
  FullName String
  cpf_cnpj String  @unique
  email    String  @unique
  phone    Int
  address  String?
  status   Boolean

  shippings Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("driver")
}

model Owner {
  id       String  @id @default(uuid())
  FullName String
  cpf_cnpj String  @unique
  email    String
  phone    Int?
  address  String?

  trucks   Truck[]   @relation("OwnerToTruck")
  vehicles Vehicle[] @relation("OwnerToVehicle")
  carts    Cart[]    @relation("OwnerToCart")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("owner")
}

model Truck {
  id           String  @id @default(uuid())
  description  String?
  price        Float
  licensePlate String  @unique
  chassis      String  @unique
  renavam      String  @unique
  status       Boolean

  typeOfTruck       String?
  model             String?
  color             String?
  yearOfManufacture Int?
  typeOfCart        String?
  numberOfAxles     Int

  ownerId   String
  owner     Owner      @relation("OwnerToTruck", fields: [ownerId], references: [id])
  shippings Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("truck")
}

model Cart {
  id           String  @id @default(uuid())
  description  String?
  price        Float
  status       Boolean
  licensePlate String  @unique
  chassis      String  @unique
  renavam      String  @unique

  model             String?
  manufacturer      String?
  numberOfAxles     Int?
  yearOfManufacture Int?
  typeOfCart        String?

  ownerId   String
  owner     Owner           @relation("OwnerToCart", fields: [ownerId], references: [id])
  shippings CartsShipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cart")
}

model Vehicle {
  id           String  @id @default(uuid())
  description  String?
  image        String?
  origin       String
  destination  String
  licensePlate String  @unique
  chassis      String  @unique
  renavam      String  @unique

  model             String?
  color             String?
  manufacturer      String?
  yearOfManufacture Int?
  typeOfVehicle     String?

  ownerId   String
  owner     Owner              @relation("OwnerToVehicle", fields: [ownerId], references: [id])
  shippings VehiclesShipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicle")
}

model Customers {
  id       String  @id @default(uuid())
  name     String
  cpf_cnpj String  @unique
  email    String 
  phone    Int
  address  String?

  shippings Shipping[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Shipping {
  id        String @id @default(uuid())
  from      String
  to        String
  totalCost Float
  status    String

  driverId   String
  truckId    String
  customerId String
  vehicles   VehiclesShipping[]
  carts      CartsShipping[]
  truck      Truck              @relation(fields: [truckId], references: [id])
  driver     Driver             @relation(fields: [driverId], references: [id])
  customer   Customers          @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("shipping")
}

model VehiclesShipping {
  id         String   @id @default(uuid())
  shippingId String   @map("shipping_id")
  shipping   Shipping @relation(fields: [shippingId], references: [id])
  Vehicle    Vehicle? @relation(fields: [vehicleId], references: [id])
  vehicleId  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles_shipping")
}

model CartsShipping {
  id         String   @id @default(uuid())
  shippingId String   @map("shipping_id")
  shipping   Shipping @relation(fields: [shippingId], references: [id])
  cartId     String?
  Cart       Cart?    @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("carts_shipping")
}
